import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
import markups as nav
from db import Database

TOKEN = '5203636918:AAEDMv7gz3cfkN37s1CAZ8PfGE6kyZQ8rBc'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = Database('database.db')

class Form(StatesGroup):
    name = State()
    birth_date = State()

@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    # print(message)
    if(not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "Hi!\nI'm Makers!\nPowered by aiogram.")
        # if m is True:
            # await bot.send_message(message.from_user.id, '–≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
        # await message.reply('name')
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫')
        await Form.name.set()

        # await message.reply('hi maaaan')
    else:
        await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=nav.mainMenu)  
        # print("‚û° msg :", msg)


@dp.message_handler(state=Form.name) 
async def process_name(message: types.Message, state):
    message.text # hasan
    # state.proxy()
    await bot.send_message(message.from_user.id, '–≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏–µ ')
    await Form.next()

@dp.message_handler(state=Form.birth_date) 
async def process_birthday(message: types.Message, state):
    await message.reply('Birt')
    # message 
    # Form.next()
    async with state.proxy() as data:
        print("‚û° data BEFORE :", data)
        data['birth_date'] = message.text
        print("‚û° data AFTER :", data)
    
    await bot.send_message(message.from_user.id, "–°–¥–µ–ª–∞–Ω–æ")

@dp.message_handler() 
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        if message.text == 'üë®–ü—Ä–æ—Ñ–∏–ª—å':
            date_birth = '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + db.get_date_of_birth(message.from_user.id)
            user_nickname = '–í–∞—à –Ω–∏–∫: ' + db.get_nickname(message.from_user.id)
            await bot.send_message(message.from_user.id, user_nickname)
            await bot.send_message(message.from_user.id, date_birth)  

        else:
            if db.get_signup(message.from_user.id) == 'setnickname':
                if(len(message.text) > 15):
                    await bot.send_message(message.from_user.id, '–Ω–∏–∫–Ω—ç–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤')
                elif '@' in  message.text or '/' in message.text:
                   await bot.send_message(message.from_user.id, '–≤—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª')
                else:
                    db.set_nickname(message.from_user.id, message.text)
                    db.set_date_of_birth(message.from_user.id, message.text)
                    db.set_signup(message.from_user.id, '–ì–æ—Ç–æ–≤–æ')
                    await bot.send_message(message.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainMenu)
            


            else:
                await bot.send_message(message.from_user.id, '–ß—Ç–æ?')



# @dp.message_handler()
# async def bot_message(message: types.Message):
#     if message.chat.type == 'private':
#         if message.text == '–ü—Ä–æ—Ñ–∏–ª—å':
#             user_nickname = '–≤–∞—à –Ω–∏–∫: ' + db.get_nickname(message.from_user.id)
#             await bot.send_message(message.from_user.id, user_nickname)

#         else:
#             if db.get_signup(message.from_user.id) == 'signup':
#                 if(len(message.text) > 15):
#                     await bot.send_message(message.from_user.id, '–Ω–∏–∫–Ω—ç–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤')
#                 elif '@' in  message.text or '/' in message.text:
#                    await bot.send_message(message.from_user.id, '–≤—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª')
#                 else:
#                     db.set_nickname(message.from_user.id, message.text)
#                     await bot.send_message(message.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainMenu)
#             else:
#                         await bot.send_message(message.from_user.id, '–ß—Ç–æ?')







if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)